*vui.txt* A wrapper interface that makes command line tools more convenient

                                            _                                 ~
                               __   ___   _(_)                                ~
                               \ \ / / | | | |                                ~
                                \ V /| |_| | |                                ~
                                 \_/  \__,_|_|                                ~

TABLE OF CONTENTS                                                         *vui*
===============================================================================

|vui-introduction|
|vui-configuration|
|vui-commands|
|vui-maps|


INTRODUCTION                                                 *vui-introduction*
===============================================================================

vui (vim user interface) is a vim plugin that serves as a lightweight frontend
to your command line tools by allowing you to quickly edit arguments and
execute the commands directly from vim.

Some command line tools have many arguments and are a hastle to remember
and edit. vui allows you to quickly select the command line tool you want,
edit the arguments in a vim buffer using vim completion, and then run the
command directly from vim. vui can also print the results directly into the
vim buffer and save them to a file.

CONFIGURATION                                               *vui-configuration*
===============================================================================

vui reads from a json file to figure out which command to run, what arguments
to display, and what values can be completed.

Set `g:vui_config_file` in your vim config to let vim know where to find your
config. For example: >
    let g:vui_config_file = '~/vui_config.json'
<

If the config variable is not set then vui will attempt to use
`~/.vim/vui.json`

Tool Configuration ~

Each key of the json config file is the name of the tool and the value is
an object containing information about the tool. Each tool has these fields:
- `description`: quick discription of tool that is displayed on vui page
- `command`: the actual command to run
- `args`: list of objects describing the args for the tool (see next section)
- `parser`: Map of arg-names to regular expressions that are used to extract
arg values from a passed in string. If a match is found, whatever is in the
first capture group will be used to populate the argument values.
See |:VUIParseArgsFromString|

Tool Arguments Configuration ~

There are 2 types of arguments: binary and string
- String is just a basic argument with no special logic,
if the type is not specified then the arg will be treated as a string
- Binary args don't have a value paired with them - they are just on or off
    - `_enabled_` means it will appear in the final command
    - `_disabled_` means it won't appear in the final command
    - `"type": "binary"` will make it a binary arg.
For each arg, specify the values used for completion via a list in `values`
and a default value with `default`
- If no default is specified then `_disabled_` will be used

Example Configuration ~

>
{
# Config for StockCLI tool
  "StockCLI": {
    "description": "Look up statistics for stocks",
    "command": "python  ~/StockCLI.py",
    "parser": {
      "symbol": "s: (\\w+)",
      "date": "d: (\\w+)",
      "measure": "m: (\\w+)",
    },
    "args": [
      {
        "name": "symbol",
        "values": ["AAPL", "PLTR"],
        "default": "AAPL"
      },
      {
        "name": "date",
        # Use range to autocomplete the dates of the last few days
        "values":
        "(0,5,1) -> strftime(\"%Y-%m-%d\", localtime() - v:val*24*60*60)"
      },
      {
        "name": "measure",
        "values": ["High", "Low", "Avg", "Volume"]
      }
    ]
    # Example command
    # python3 ~/StockCLI.py --symbol AAPL --date 2021-01-01 --statistic Avg
  },
  "Tool2: {
    ...
    # Info for Tool2
    ...
  }
}
<

COMMANDS                                                         *vui-commands*
===============================================================================

Global Commands ~

VUI <tool>                                                               *:VUI*
                    Opens a vui buffer for the specified tool
                    Tab completion for tools specified in config

VUI Buffer Commands ~

VUIOutputCommand                                            *:VUIOutputCommand*
                    Outputs the command generated from the current vui buffer

VUIExecuteCommand                                          *:VUIExecuteCommand*
                    Generate the command from the buffer and execute it in vim

VUIExecuteCommandAndReadOuput                  *:VUIExecuteCommandAndReadOuput*
                    Same as |:VUIExecuteCommand| but read the output
                    into the vui buffer instead

VUISaveResults                                                *:VUISaveResults*
                    Save the results of the current vui buffer into a
                    user-specified file

VUIParseArgsFromString                                *:VUIParseArgsFromString*
                    Parse the passed in string for arg values
                    and populate the vui buffer with them
                    Useful for copying ouput from another program
                    and populating the args

MAPS                                                                 *vui-maps*
===============================================================================

Each mapping can be overridden with the corresponding `<Plug>` mapping.
For example, `nmap <localleader><CR> <Plug>(vui-execute-command)`
would run `VUIExecuteCommand` when localleader followed by enter is pressed.

Normal Mode ~

<localleader>h                                             *vui_<localleader>h*
                    Open vui mappings help
                    Note: You can close this window with `ctrl-w c`
                    Remap with `<Plug>(vui-help)`

enter                                                               *vui_enter*
                    Delete the arg value in the current line
                    then go into insert mode and activate autocomplete
                    Useful for quick changes
                    Remap with `<Plug>(vui-change-arg-for-line)`

<localleader>c                                             *vui_<localleader>c*
                    Same as `<Plug>(vui-change-arg-for-line)`
                    but doesn't activate autocomplete
                    Remap with `<Plug>(vui-clear-arg-for-line)`

<localleader>t                                             *vui_<localleader>t*
                    Toggle the arg value in the current line
                    Enabled will switch to disabled and vice versa
                    Remap with `<Plug>(vui-toggle-arg)`

<localleader>o                                             *vui_<localleader>o*
                    Same as |:VUIOutputCommand|
                    Remap with `<Plug>(vui-output-command)`

<localleader>e                                             *vui_<localleader>e*
                    Same as |:VUIExecuteCommand|
                    Remap with `<Plug>(vui-execute-command)`

<localleader>r                                             *vui_<localleader>r*
                    Same as |:VUIExecuteCommandAndReadOuput|
                    Remap with `<Plug>(vui-execute-command-and-read)`

<localleader>s                                             *vui_<localleader>s*
                    Same as |:VUISaveResults|
                    Remap with `<Plug>(vui-save-results)`

<localleader>p                                             *vui_<localleader>p*
                    Same as |:VUIParseArgsFromString|
                    Remap with `<Plug>(vui-parse-args)`

Insert Mode ~

Tab                                                                   *vui_tab*
                    Activate autocomplete for the current line
                    If cursor is not on an argument line then
                    it will function as a normal tab
                    Remap with `<Plug>(vui-complete)`
